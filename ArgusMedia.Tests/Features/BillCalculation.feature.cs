// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ArgusMedia.Tests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Bill Calculation")]
    public partial class BillCalculationFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en"), "Features", "Bill Calculation", "  Calculates correct bill with pricing rules, discounts and service charges.", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A group of 4 people order full meals")]
        public void AGroupOf4PeopleOrderFullMeals()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A group of 4 people order full meals", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "Starters",
                            "Mains",
                            "Drinks"});
                table1.AddRow(new string[] {
                            "1",
                            "1",
                            "1"});
                table1.AddRow(new string[] {
                            "1",
                            "1",
                            "1"});
                table1.AddRow(new string[] {
                            "1",
                            "1",
                            "1"});
                table1.AddRow(new string[] {
                            "1",
                            "1",
                            "1"});
                testRunner.Given("the following group order at 12:30:", ((string)(null)), table1, "Given ");
                testRunner.Then("the total amount should be £58.40, service charge should be £4.40 and discount sh" +
                        "ould be £0.00", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Group expands and orders at different times with applied drink discount")]
        public void GroupExpandsAndOrdersAtDifferentTimesWithAppliedDrinkDiscount()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Group expands and orders at different times with applied drink discount", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "Starters",
                            "Mains",
                            "Drinks"});
                table2.AddRow(new string[] {
                            "1",
                            "1",
                            "1"});
                table2.AddRow(new string[] {
                            "0",
                            "1",
                            "1"});
                testRunner.Given("the following group order at 18:30:", ((string)(null)), table2, "Given ");
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "Starters",
                            "Mains",
                            "Drinks"});
                table3.AddRow(new string[] {
                            "0",
                            "1",
                            "1"});
                table3.AddRow(new string[] {
                            "0",
                            "1",
                            "1"});
                testRunner.When("the following group order at 20:00:", ((string)(null)), table3, "When ");
                testRunner.Then("the total amount should be £43.70, service charge should be £3.20 and discount sh" +
                        "ould be £1.50", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Order is updated after cancellation")]
        public void OrderIsUpdatedAfterCancellation()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Order is updated after cancellation", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "Starters",
                            "Mains",
                            "Drinks"});
                table4.AddRow(new string[] {
                            "1",
                            "1",
                            "1"});
                table4.AddRow(new string[] {
                            "1",
                            "1",
                            "1"});
                table4.AddRow(new string[] {
                            "1",
                            "1",
                            "1"});
                table4.AddRow(new string[] {
                            "1",
                            "1",
                            "1"});
                testRunner.Given("the following group order at 20:30:", ((string)(null)), table4, "Given ");
                testRunner.Then("the total amount should be £55.40, service charge should be £4.40 and discount sh" +
                        "ould be £3.00", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                testRunner.When("one client cancels their order", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                testRunner.Then("the total amount should be £41.55, service charge should be £3.30 and discount sh" +
                        "ould be £2.25", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
